#lang sicp
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr  '()))
    (begin
      (define (set-front-ptr! item) (set! front-ptr item))
      (define (set-rear-ptr! item) (set! rear-ptr item))
      (define (empty-queue?) (null? front-ptr))
      (define (front-queue?)
        (if (empty-queue?)
            (error "FRONT вызвана с пустой очередью")
            (car front-ptr)))
      (define (insert-queue! item)
        (let ((new-pair (cons item '())))
          (cond ((empty-queue?)
                 (set-front-ptr! new-pair)
                 (set-rear-ptr! new-pair)
                 dispatch)
                (else
                 (set-cdr! rear-ptr new-pair)
                 (set-rear-ptr! new-pair)
                 dispatch))))
      (define (delete-queue!)
        (if (empty-queue?)
            (error "DELETE! вызвана с пустой очередью")
            (let ((pop-elem (car front-ptr)))
              (set-front-ptr! (cdr front-ptr))
              pop-elem)))
      (define (print-queue)
        (define (iter tail)
          (if (null? tail)
              (newline)
              (begin
                (display (car tail))
                (display "; ")
                (iter (cdr tail)))))
        (display "queue | ")
        (iter front-ptr))

      (define (dispatch m . args)
        (cond ((eq? m 'insert!) (insert-queue! (car args)))
              ((eq? m 'delete!) (delete-queue!))
              ((eq? m 'empty?) (empty-queue?))
              ((eq? m 'print) (print-queue))
              (else (error "DISPATCH неверное имя метода" m))))
      dispatch)))

(define q2 (make-queue))
(q2 'print)
(q2 'insert! 'a)
(q2 'print)
(q2 'insert! 'b)
(q2 'print)
(q2 'delete!)
(q2 'print)
(q2 'delete!)
(q2 'print)
(q2 'insert! 'a)
(q2 'print)